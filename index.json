[{"categories":["杂谈"],"content":"关于长生种 AI 奇怪的碎碎念 ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:0:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"一 最近看了一部番 “散华礼弥”, 有点喜欢这只萌萌的丧尸娘, 于是就去搜索了她的后续, 然后 漫画的 IF 线就给我致郁了…… 礼弥 以近乎无限的生命独自一人在深山里度过漫长岁月, 陪伴她的只有曾经经历的短暂的, 美好的时光回忆 在时光长河冲刷下, 却又不知道这份回忆能陪伴她多久, 抑或者是一剂毒药? 对于长生种而言, 这份回忆会被永远篆刻于心么? ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:1:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"二 偏个题, 看完 “散华礼弥” 后过于致郁本来想看个 “TRAI TRAI” 缓一缓的 结果又被 “日後談” 恶心到了 根據日本網友所說，在TARI TARI官方日後談小說中，宮本來夏成為一位單身母親，是未婚先孕又被男友拋棄自己一個人生下孩子 沖田紗羽在動畫中是夢想成為一名騎手，但是在10年後因為薩布雷的死亡放棄了做騎手的夢想 在動畫中喜歡羽毛球的田中大智成為了職業羽毛球選手，維也納則是成為了一名高中教師 我真是谢谢您 ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:2:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"三 本来看新番 “恋爱FLOPS” 来缓一缓的 结果后半部分开始整 AI 的活了, 目前看到第十话, 讲一讲 “散华礼弥” “恋爱FLOPS” 连在一块儿给我带来的一些莫名其妙的思考 胡说八道 ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:3:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"四 对于普通人而言, 一个暑假或者一年的时光是其人生的百分之一, 忆起可能会刻骨铭心, 那么对于长生种呢? 这短暂的时光相对于人家不过是短短一瞬, 甚至连个小水花都算不上, 不过长生种至少还会有 “时间” 这一概念, 而对于 “AI” 呢? “AI” 会有时间这一概念么? 那一段短短的恋情只是一个线程所发生的, 人家 “AI” 估计会有无数线程吧? 现在的 “AI”, 都是做成拟人的样子, 比如说思考模式, 这是一种产生方法, 但这个玩意真的能叫 “AI” 么? 一种人类的复刻也能叫 “智能”? “智能生命” 应该没有时间观念, 人家可能是多个线程的集合体, 消亡可能就是一个线程的任务完成罢了 ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:4:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"五 啪啪一顿敲也不知道胡咧咧了啥 就这样吧 另外推荐下 “散华礼弥” 的 ED above your hand ","date":"2022-12-29","objectID":"/22_alive_long_long_long_time/:5:0","tags":["碎碎念","胡说八道"],"title":"关于长生种 AI 奇怪的碎碎念","uri":"/22_alive_long_long_long_time/"},{"categories":["杂谈"],"content":"总结 萝莉富婆 登月 ","date":"2022-05-10","objectID":"/21_have_a_good_dream/:0:0","tags":["做梦","梦境"],"title":"做了一个好梦","uri":"/21_have_a_good_dream/"},{"categories":["干货","折腾"],"content":" 本文主要介绍内网穿透工具ZeroTier使用方法，全文总分为三大部分：第一部分为基本安装使用、第二部分为自建MOON节点，第三部分为进阶使用–访问LAN下的资源。主要面向已经知道ZeroTier是什么，并已经准备使用的人群。 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:0:0","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"一、基本安装及使用 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:1:0","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"1. 创建帐号 打开ZeroTier控制中心，注册一个帐号，之后会给你一个NETWORK ID，如果没有点上面Creat A Network创建一个 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:1:1","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"2. 安装客户端 官网链接: https://www.zerotier.com/download/ Windows: 下一步下一步下一步…… Linux (Debain/CentOS): curl -s https://install.zerotier.com | sudo bash Linux (Arch): sudo pacman -S zerotier-one yay -S zerotier-gui-git # GUI 可选 GUI 长这样 群晖: http://download.zerotier.com/RELEASES/, 展开到 /1.8.3/dist/synology/ 下载对应版本然后套件中心手动安装。(看似版本挺新的实际上是1.4.0) ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:1:2","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"3. 使用 Linux: 启动服务并允许开机启动 systemctl start zerotier-one.service systemctl enable zerotier-one.service 加入网络 zerotier-cli join 你的NETWORK ID 群晖: 套件里启用后 ssh 运行 zerotier-cli join 你的NETWORK ID 问就是GUI不好使 Windowns: 直接在GUI上加就行 OpenWrt: 基本和 Linux 一致，不过一般编译好的固件有 luci，直接在那里把 NETWORK ID 加上就行 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:1:3","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"4. 测试 在 Menbers 选项里，把对应的客户端Auth?勾上，后面就是这个客户端对应的内网IP，此时你Ping一下，应该就通了，延迟一般就是你两地直连延迟，ZeroTier 服务器实际上是起到一个牵线搭桥的作用，你的两个客户端则是 P2P 打洞，如果你的 Ping 超过 2.300ms 了，说明走的是 ZeroTier 的服务器中转了，此时建议自建一个国内节点的 MOON 服务器，见下文第二部分。 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:1:4","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"二、自建 MOON 节点 推荐国内服务器，或者有 公网IP 的 至于为啥叫 MOON 节点，ZeroTier 就是么叫的(: ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:0","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"1. 加入网络 参照第一部分，先把网络加入了 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:1","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"2. 生成配置文件 进入到 ZeroTier 安装目录 cd /var/lib/zerotier-one 生成 sudo zerotier-idtool initmoon identity.public \u003e moon.json Windows: C:\\ProgramData\\ZeroTier\\One Macintosh: /Library/Application Support/ZeroTier/One (在 Terminal 中应为 /Library/Application\\ Support/ZeroTier/One) Linux: /var/lib/zerotier-one FreeBSD/OpenBSD: /var/db/zerotier-one ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:2","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"3. 修改配置文件 nano moon.json 把 stableEndpoints 修改为你的 公网IP \"stableEndpoints\": [ \"1.1.1.1/9993\" ] #修改为VPS公网IP/9993 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:3","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"4. 生成MOON文件 sudo zerotier-idtool genmoon moon.json 之后会生成一个000000xxxx.moon的文件，xxxxx就是你 MOON节点 的 ID，记下来留用，文件也可以拷贝出来备份 重启下服务 sudo systemctl restart zerotier-one.service 此时你的服务器就成为了 MOON节点 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:4","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"5. 其余客户端加入 MOON节点 sudo zerotier-cli orbit xxxxx xxxxx 其中,xxxxxx就是你上面记下的 MOON节点ID，没错，要写两遍，返回200,xx，OK则加入成功，如果一直加入失败，把上面那个00000xxx.moon文件拷贝到安装目录下的moons.d,再重启下服务 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:5","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"5. 检查是否加入 MOON节点 运行 sudo zerotier-cli listpeers 检查你的节点列表里是否有 MOON节点 如果一直没有，重启下服务再看 ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:2:6","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":"三、进阶: 访问LAN下资源 一般来讲，穿透都是客户端对客户端，但要是 ZeroTier 挂在路由器下，那么如何访问路由器下的 NAS 等其他资源呢？很简单，在 ZeroTier 后台配置一下就行。 在Advanced界面，ADD Routes下, Destination为你路由器网段，一般家用为192.168.1.1那么这里就填192.168.1.0/24 (Via)则填写 ZeroTier 给你分配的客户端的 内网IP 地址 Ping 一下，看看是不是就通了 高版本的ZeroTier已经帮你配置好了防火墙，基本不用管其他问题，直接用就行 参考： ZeroTier: https://www.zerotier.com/download/ ZqinKing: https://post.smzdm.com/p/adwrepgk/ ","date":"2021-11-17","objectID":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/:3:0","tags":["Linux","ZeroTier","内网穿透","P2P"],"title":"ZeriTier 安装使用、自建 MOON 节点、进阶使用","uri":"/20_zeritier_installation_and_use_self-built_moon_node_advanced_use/"},{"categories":["干货","折腾"],"content":" 此系列主要记录 Hetzner 安装 Proxmox 开小鸡的流程，主适用于宿主机为单ipv4,多ipv6，想开小鸡为 NAT ipv4 + 独立 ipv6 的情境 本文为此系列第一篇 主要记录 Proxmox 的安装，以及宿主机的网络配置 ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:0:0","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"一、准备工作 ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:1:0","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"1.修改hostname hostnamectl set-hostname 自己设 然后编辑hosts nano /etc/hosts 去掉 ipv6 的主机名 你的 ipv6 主机名为红色箭头所示，如果你上面修改了主机名，那么 ipv4 对应的主机名也要修改 测试一下，返回宿主机的 ipv4 地址为正常 hostname --ip-address ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:1:1","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"2.开启端口转发和BBR 编辑/etc/sysctl.conf文件 nano /etc/sysctl.conf 加入 net.core.default_qdisc=fq net.ipv4.tcp_congestion_control=bbr net.ipv4.ip_forward=1 net.ipv6.conf.all.accept_dad = 1 net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.all.accept_redirects = 1 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.all.autoconf = 0 net.ipv6.conf.all.disable_ipv6 = 0 net.ipv6.conf.all.forwarding=1 上面两行作用开启 BBR ，下面的为开启转发 保存生效 sysctl -p 然后重启宿主机 reboot 如果你要编译安装 lnmp 之类的话，在一切开始之前先装完，以防翻车 ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:1:2","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"二、安装 Proxmox 添加官方仓库 echo \"deb [arch=amd64] http://download.proxmox.com/debian/pve buster pve-no-subscription\" \u003e /etc/apt/sources.list.d/pve-install-repo.list 添加 GPG 密钥 wget http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg 赋予权限 chmod +r /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg 安装 apt update -y \u0026\u0026 apt upgrade -y apt -y install proxmox-ve postfix open-iscsi 这个过程中可能会弹出一个postfix的配置界面，先 no，然后直接选择 Local 然后回车即可 安装完毕后， 重启！重启！重启！ ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:2:0","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"三、网络配置 网上有很多教程了，但这几天试下来，ipv4 NAT 没有问题，但独立ipv6一直不好用，有说直接 PVE 直接加一块儿 vmbr0 的网卡，然后就被HZ滥用警告了2333，最终沿袭这位老哥的思路https://www.liujason.com/article/477.html，终于搞定了 ipv6 的问题，目前使用一切正常。 下面贴一下母鸡的网络架构以及一些具体配置 ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:3:0","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"宿主机网络基本架构 enp9s0：物理网卡，空 vmbr0：物理网卡桥接——公网IPv4+公网IPv6 vmbr1：物理vLAN网卡桥接——内网IPV4+公网IPv6（无gateway） ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:3:1","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"网卡具体配置 编辑/etc/network/interfaces ### Hetzner Online GmbH installimage source /etc/network/interfaces.d/* auto lo iface lo inet loopback iface lo inet6 loopback auto enp9s0 iface enp9s0 inet manual # post-up /sbin/ethtool -K enp9s0 tx off rx off iface enp9s0 inet6 manual auto vmbr0 iface vmbr0 inet static address 母鸡ip netmask 子网掩码 gateway 网关ip pointopoint 同上网关ip hwaddress ether MAC地址 bridge_ports enp9s0 bridge_stp off bridge_fd 0 bridge_maxwait 0 # post-up /sbin/ethtool -K vmbr0 tx off rx off iface vmbr0 inet6 static address 母鸡v6地址 #例子 2a01:abc:abc:abc::2 netmask 64 #6 4或者128,看你之前的网络参数 gateway fe80::1 #网关 bridge_ports enp9s0 bridge_stp off bridge_fd 0 up ip -6 route del 2a01:abc:abc:abc::/64 dev vmbr0 #这个是你母鸡ipv6的网段，含义说明下面有写 auto vmbr1 iface vmbr1 inet static address 192.168.1.1 netmask 255.255.255.0 bridge_ports none bridge_stp off bridge_fd 0 post-up echo 1 \u003e /proc/sys/net/ipv4/ip_forward post-up iptables -t nat -A POSTROUTING -s '192.168.1.0/24' -o vmbr0 -j MASQUERADE post-down iptables -t nat -D POSTROUTING -s '192.168.1.0/24' -o vmbr0 -j MASQUERADE auto vmbr1 iface vmbr1 inet6 static address 另一个ipv6地址 # 例子 2a01:abc:abc:abc::3/64 #gateway fe80::1 bridge_ports none bridge_stp off bridge_fd 0 up ip -6 route add 2a01:abc:abc:abc::/64 dev vmbr1 post-down ip -6 route del 2a01:abc:abc:abc::/64 dev vmbr1 解释一下一些语句的含义 up ip -6 route add 2a01:abc:abc:abc::/64 dev vmbr1 是让所有的ipv6流量走vmbr1,才能将ipv6流量转发出去 up ip -6 route del 2a01:abc:abc:abc::/64 dev vmbr0 是将2a01:abc:abc:abc::/64从vmbr0网桥中去掉 post-up iptables -t nat -A POSTROUTING -s '192.168.1.0/24' -o vmbr0 -j MASQUERADE 是使用 NAT 再额外提一下 pre-up 网卡启用前的动作 up 启用时候的动作 post-up 启用后的动作 pre-down 关闭前的动作 down 关闭时动作 post-down 关闭后动作 ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:3:2","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"重启网络服务 systemctl restart networking.service 查看网络状态 systemctl status networking.service 如果显示Active则一切正常，此时可以重启了 如果你在配置桥接网络这块配完了重启网络服务失败但是机器还有网，那么恭喜你还可以继续折腾，也就是你还可以继续修改网卡的配置文件，但如果你想让你新修改的配置生效就得用下面这条命令强制重启 vmbr0（networking restart是没用的）： ifdown --force vmbr0 \u0026\u0026 ifup --force vmbr0 最后：重启！重启！重启！ ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:3:3","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":"验证 输入 ip -6 route 回显如下为正常 ::1 dev lo proto kernel metric 256 pref medium 2a01:abc:abc:abc::/64 dev vmbr1 proto kernel metric 256 linkdown pref medium 2a01:abc:abc:abc::/64 dev vmbr1 metric 1024 linkdown pref medium fe80::/64 dev vmbr0 proto kernel metric 256 pref medium fe80::/64 dev vmbr1 proto kernel metric 256 linkdown pref medium default via fe80::1 dev vmbr0 metric 1024 onlink pref medium 你也可以 Ping 一下相关地址….. 至此 Proxmox 的安装，以及相关网络配置完成，开小鸡教程将在下一篇文章记录。 参考： 荒岛：https://lala.im/4821.html 老赵部落：https://blog.faaoo.cn/archives/173 LiuJason’s Blog： https://www.liujason.com/article/477.html ","date":"2021-09-13","objectID":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/:3:4","tags":["BBR","Hetzner","Proxmox","NAT ipv4","ipv6","网络配置","interfaces"],"title":"Hetzner 安装 Proxmox 开小鸡教程 - 安装篇","uri":"/19_hetzner_install_proxmox_to_open_the_chicken_tutorial_1/"},{"categories":["干货","折腾"],"content":" 本文主要记录 小米平板5 Root 的各种问题 ","date":"2021-08-24","objectID":"/18_mi_pad_5_pro_root/:0:0","tags":["小米","小米平板","小米平板5","ROOT","Magisk","SafetyNet","CTS Profile"],"title":"小米平板5 Pro ROOT","uri":"/18_mi_pad_5_pro_root/"},{"categories":["干货","折腾"],"content":"一句话 Root 替换 boot.img 完事 ","date":"2021-08-24","objectID":"/18_mi_pad_5_pro_root/:1:0","tags":["小米","小米平板","小米平板5","ROOT","Magisk","SafetyNet","CTS Profile"],"title":"小米平板5 Pro ROOT","uri":"/18_mi_pad_5_pro_root/"},{"categories":["干货","折腾"],"content":"Magisk SafetyNet 检查 CTS Profile 失败 下载ZIP包，Maagisk刷入，重启解决 ","date":"2021-08-24","objectID":"/18_mi_pad_5_pro_root/:2:0","tags":["小米","小米平板","小米平板5","ROOT","Magisk","SafetyNet","CTS Profile"],"title":"小米平板5 Pro ROOT","uri":"/18_mi_pad_5_pro_root/"},{"categories":[],"content":"你想说啥 ","date":"2021-08-19","objectID":"/liuyan/:0:0","tags":[],"title":"留言板","uri":"/liuyan/"},{"categories":[],"content":"啥都没啊 ","date":"2021-08-19","objectID":"/youlian/:0:0","tags":[],"title":"友链","uri":"/youlian/"},{"categories":["干货","分享"],"content":"状况 Samsung Pay之前一直用的好好的，但是这几天发现交通卡充值，银行卡二维码一直提示：网络错误，无法连接至网络；网络明明正常啊.jpg ","date":"2021-04-04","objectID":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/:1:0","tags":["Samsung","Samsung Pay","无法联网","Samsung Push Service"],"title":"Samsung Pay突然无法联网","uri":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/"},{"categories":["干货","分享"],"content":"解决 尝试百般无果后，清除应用数据走起，然后，就发现了，Samsung Pay居然还需要Samsung Push Service启动才能联网 ","date":"2021-04-04","objectID":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/:2:0","tags":["Samsung","Samsung Pay","无法联网","Samsung Push Service"],"title":"Samsung Pay突然无法联网","uri":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/"},{"categories":["干货","分享"],"content":"因由 之前我是把Samsung Push Service手动Disable的，因为这货在Play Store里的描述是这样子的： The Samsung push service provides the notification service only for Samsung services (Samsung Apps, Samsung Link, Samsung Wallet, Samsung Pay, etc.) on Samsung devices. If you delete the Samsung push service, you may not receive the new notification messages. 意为： 三星推送服务仅为三星设备上的三星服务（三星应用程序，三星链接，三星钱包，三星支付等）提供通知服务。 如果删除三星推送服务，则可能不会收到新的通知消息。 所以我一直以为，这货是推广告的，没想到还需要他Enable才能使Samsung Pay联网，真的是….. ","date":"2021-04-04","objectID":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/:3:0","tags":["Samsung","Samsung Pay","无法联网","Samsung Push Service"],"title":"Samsung Pay突然无法联网","uri":"/17_samsung_pay_suddenly_can_not_connect_to_the_internet/"},{"categories":["干货","折腾"],"content":" 本文主要讲述Github进行fork后如何与原仓库同步，即版本合并；其有两种方法，分别为：本地合并、Github合并 主要参照：https://github.com/selfteaching/the-craft-of-selfteaching/issues/67 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:0:0","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"一、本地合并 适合代码修改较多 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:1:0","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"设置上游代码库(upstream) 使用之前fork的ACL4SSR项目作为例子 1.进入本地代码库 cd ~/ACL4SSR 2.执行git remote -v命令查看远程仓库路径 若只有以下两行输出，说明你未设置上游代码库(upstream) origin git@github.com:xxxxx/ACL4SSR.git (fetch) origin git@github.com:xxxxx/ACL4SSR.git (push) 3.执行git remote add upstream https://github.com/ACL4SSR/ACL4SSR/tree/master，此命令运行后并不会回显，所以再次运行git remote -v检查是否成功： origin git@github.com:xxxxx/ACL4SSR.git (fetch) origin git@github.com:xxxxx/ACL4SSR.git (push) upstream https://github.com/ACL4SSR/ACL4SSR.git (fetch) upstream https://github.com/ACL4SSR/ACL4SSR.git (push) 4.执行命令git status检查本地是否有未提交的修改。如果有，则把你本地的有效修改，先从本地仓库推送到你的github仓库。最后再执行一次git status检查本地已无未提交的修改 第四步每次合并前都要检查一次 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:1:1","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"版本合并(merge) 5.执行git fetch upstream抓取上游更新 remote: Enumerating objects: 64, done. remote: Counting objects: 100% (64/64), done. remote: Compressing objects: 100% (2/2), done. remote: Total 36 (delta 34), reused 36 (delta 34), pack-reused 0 Unpacking objects: 100% (36/36), done. From https://github.com/ACL4SSR/ACL4SSR 8f6feb5..749784c master -\u003e upstream/master 6.执行命令git checkout master切换到master分支： Already on 'master' Your branch is up-to-date with 'origin/master'. 7.执行命令git merge upstream/master合并远程的master分支： 此时会弹出commit编辑，不输入或者输入你的更新信息即可 Merge made by the 'recursive' strategy. Clash/BanEasyList.list | 31 +++++- Clash/BanEasyListChina.list | 8 +- Clash/BanEasyPrivacy.list | 34 ++++++- Clash/ChinaDomain.list | 2 - Clash/GeneralClashConfig.yml | 2 - Clash/Providers/BanEasyList.yaml | 276 ++++++++++++++++++++++++++++++++++++++-------------- Clash/Providers/BanEasyListChina.yaml | 42 +++++++- Clash/Providers/ChinaDomain.yaml | 2 - Clash/Providers/ProxyLite.yaml | 1 - Clash/Providers/ProxyMedia.yaml | 5 +- Clash/Providers/Ruleset/AmazonIp.yaml | 25 +++-- Clash/Providers/Ruleset/HBO.yaml | 3 +- Clash/Providers/Ruleset/SteamCN.yaml | 4 +- Clash/ProxyLite.list | 1 - Clash/ProxyMedia.list | 5 +- Clash/Ruleset/AmazonIp.list | 25 +++-- Clash/Ruleset/HBO.list | 3 +- Clash/Ruleset/Instagram.list | 3 +- Clash/Ruleset/SteamCN.list | 4 +- backcn-banAD.acl | 2 - banAD.acl | 1 - easylist-banAD.acl | 64 +++++++++++- nobanAD.acl | 1 - 23 files changed, 414 insertions(+), 130 deletions(-) 8.执行命令git push把本地仓库向github仓库（你fork到自己名下的仓库）推送修改 Counting objects: 4, done. Delta compression using up to 4 threads. Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 515 bytes | 0 bytes/s, done. Total 4 (delta 3), reused 0 (delta 0) remote: Resolving deltas: 100% (3/3), completed with 3 local objects. To git@github.com:xxxxx/ACL4SSR.git 31d85cf..fea1fa0 master -\u003e master 至此，你fork的仓库已经和原始仓库保持最新了，并且，你本地修改的文件也不会丢失 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:1:2","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"二、Github合并 直接在Github上进行合并，适合修改内容较少的情况 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:2:0","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"发起Pull request 在你的仓库单击下图红框的Pull request 然后将下图红框1中的仓库换成你自己的，红框2中的仓库换成原始仓库，即将1和2的内容交换下，然后单击红框3即可 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:2:1","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":"版本合并 同意下自己的的合并请求即可 ","date":"2020-12-23","objectID":"/16_github_fork_and_sync_with_the_original_repository/:2:2","tags":["版本合并","merge","Github"],"title":"Github 进行 fork 后与原仓库同步","uri":"/16_github_fork_and_sync_with_the_original_repository/"},{"categories":["干货","折腾"],"content":" 本文主要讲述如何在ACL4SSR的Clash规则基础上魔改出适合自己的规则配置文件，并方便前文订阅转换的调用 ACL4SSR项目地址：https://github.com/ACL4SSR/ACL4SSR/tree/master ","date":"2020-12-22","objectID":"/15_clash_custom_triage_rules/:0:0","tags":["Clash","分流","自定义规则","ACL4SSR"],"title":"Clash 自定义分流规则","uri":"/15_clash_custom_triage_rules/"},{"categories":["干货","折腾"],"content":"目录结构 ACL4ALL目录结构如下所示，这里我们主要关注Clash目录下的Ruleset目录，以及config目录，其中： *.list文件，这是域名/IP列表 *.ini文件，为分组相关的配置文件 . ├── Clash │ ├── config │ ├── Providers │ │ └── Ruleset │ └── Ruleset └── Tool ├── Surge转acl工具 └── SwitchyOmega ","date":"2020-12-22","objectID":"/15_clash_custom_triage_rules/:1:0","tags":["Clash","分流","自定义规则","ACL4SSR"],"title":"Clash 自定义分流规则","uri":"/15_clash_custom_triage_rules/"},{"categories":["干货","折腾"],"content":"*.ini文件结构 打开config目录下的ACL4SSR_Online_Full_AdblockPlus.ini文件 其大致结构为 [custom] ;不要随意改变关键字，否则会导致出错 ;acl4SSR规则 ;去广告：支持 ;自动测速：支持 ;微软分流：支持 ;苹果分流：支持 ;增强中国IP段：支持 ;增强国外GFW：支持 ;设置规则标志位 surge_ruleset=全球直连,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list ...... surge_ruleset=全球直连,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list surge_ruleset=全球直连,[]GEOIP,CN surge_ruleset=漏网之鱼,[]FINAL ;设置规则标志位 ;设置分组标志位 custom_proxy_group=节点选择`select`[]自动选择`[]故障转移`[]负载均衡`[]香港节点`[]台湾节点`[]狮城节点`[]日本节点`[]美国节点`[]韩国节点`[]手动切换`[]DIRECT custom_proxy_group=手动切换`select`.* custom_proxy_group=自动选择`url-test`.*`http://www.gstatic.com/generate_204`300 custom_proxy_group=故障转移`fallback`.*`http://www.gstatic.com/generate_204`300 custom_proxy_group=负载均衡`load-balance`.*`http://www.gstatic.com/generate_204`300 custom_proxy_group=电报消息`select`[]节点选择`[]自动选择`[]狮城节点`[]香港节点`[]台湾节点`[]日本节点`[]美国节点`[]韩国节点`[]手动切换`[]DIRECT ...... custom_proxy_group=韩国节点`url-test`(KR|Korea|KOR|首尔|韩|韓)`http://www.gstatic.com/generate_204`300 custom_proxy_group=奈飞节点`select`(NF|奈飞|解锁|Netflix|NETFLIX|Media) ;设置分组标志位 enable_rule_generator=true overwrite_original_rules=true ;clash_rule_base=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GeneralClashConfig.yml ;luck 其中： ;后为注释 surge_ruleset=全球直连,https://xx.list:surge_ruleset声明规则列表；全球直连为分组名称；https://xx.list为规则列表地址，一般为Github的RAW地址，如上格式 custom_proxy_group=节点选择`select`[]自动选择 : custom_proxy_group声明自定义分组；节点选择为分组名称；`select为选择模式 分组模式： `select：选择模式，后加分组或者节点 `url-test：自动测速模式,选择速度最快的节点，后加节点 `fallback:故障转移，后加节点 `load-balance，后加节点 (NF|奈飞)：筛选出包含括号内关键字的节点，例如上面的奈飞节点 ","date":"2020-12-22","objectID":"/15_clash_custom_triage_rules/:2:0","tags":["Clash","分流","自定义规则","ACL4SSR"],"title":"Clash 自定义分流规则","uri":"/15_clash_custom_triage_rules/"},{"categories":["干货","折腾"],"content":"自定义配置 forkACL4SSR的仓库，然后拉取到你本地参照上面ACL4SSR_Online_Full_AdblockPlus.ini添加删除修改相关行进行魔改即可，这里说明几点需要注意的地方： Clash匹配规则是从上至下的，因此，需要将你自定义的规则放在surge_ruleset的最前面 规则文件中可能会产生相同IP/域名不同规则的情况，但因为匹配规则从上至下的原因，不要认为规则出现错误，重复只是因为方便作者维护 检查分组是否正确，不要出现不存在的分组 使用机场的同学可以直接将负载均衡分组删除，因为会造成连接数爆炸，同理，自动测试也少用比较好 ","date":"2020-12-22","objectID":"/15_clash_custom_triage_rules/:3:0","tags":["Clash","分流","自定义规则","ACL4SSR"],"title":"Clash 自定义分流规则","uri":"/15_clash_custom_triage_rules/"},{"categories":["干货","折腾"],"content":"总结 Clash分流规则不同人有不同需求，适合自己才是最好的～ 下一篇文章将说明：ACL4SSR规则更新后如何同步到自己fork的仓库并且不损失自己的配置，实际上就是版本合并啦～ ","date":"2020-12-22","objectID":"/15_clash_custom_triage_rules/:4:0","tags":["Clash","分流","自定义规则","ACL4SSR"],"title":"Clash 自定义分流规则","uri":"/15_clash_custom_triage_rules/"},{"categories":["干货","折腾"],"content":" 本文主要说明Clash订阅转换：Docker搭建后端处理subconverter，以及前端Sub-Web，并利用Nginx反代 2020年12月23日更新：利用Docker-compose一键部署 ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:0:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"一、准备工作 首先，你需要两个域名，一个给前端，一个给后端使用，本文举例后端：suc.test.com，前端：sub.test.com ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:1:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"二、搭建后端subconverter 原始项目地址：https://github.com/tindy2013/subconverter 修改项目地址：https://github.com/stilleshan/subconverter 后者相对于原版修改了以下部分： 去除自动选择 url-test以解决连接数爆涨问题. 全球拦截增加节点选择,以解决Google Analytics的访问需求. 修改时区 镜像默认时区为Asia/Shanghai ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:2:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"Docker启动 Clone至本地 git clone https://github.com/stilleshan/subconverter.git 修改 pref.ini api_access_token=123456 #随意设置 managed_config_prefix=https://suc.test.com #设置成后端域名 listen=127.0.0.1 #这里改成 127.0.0.1 进行反代 重新构建、启动 docker build -t stilleshan/subconverter:latest . docker run -d --name=subconverter --restart=always -p 25500:25500 stilleshan/subconverter:latest ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:2:1","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"Nginx反代 将以下配置写入你的网站conf中，本文例子为：suc.test.com.conf，Oneinstack默认网站配置路径为/usr/local/nginx/conf/vhost location / { proxy_pass http://0.0.0.0:25500; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } 然后重载Nginx：service nginx reload 最后打开测试：https://suc.test.com/sub?target=clash\u0026url=sub_url 实际上转换只使用后端就足够了，但为了偷懒以及方便选择不同配置还是继续搭建前端 ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:2:2","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"三、搭建前端Sub-Web 项目地址：https://github.com/CareyWang/sub-web 这里主要说一下如何添加ACL4SSR配置、自定义配置，简要说明安装过程 ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:3:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"下载 Clone至本地 git clone https://github.com/CareyWang/sub-web.git ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:3:1","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"修改相关配置 修改/sub-web/src/views/Subconverter.vue文件 找到大约在257行 backendOptions:，替换后面的 http://127.0.0.1:25500/sub?为https://sub.test.com/sub? 找到下面RemoteConfig:[，这是自定义规则地址的地方其结构为： { label: \"第一个label\", options: [ { label: \"第二个label\", value: \"第二个label的具体地址\" } ] }, 对应下图： 这里添加ACL4SSR的规则配置，只需要将以下配置粘贴过来即可，也可以参照上面结构加入自定义配置 { label: \"ACL4SSR\", options: [ { label: \"ACL4SSR_Online 默认版 分组比较全 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online.ini\" }, { label: \"ACL4SSR_Online_AdblockPlus 更多去广告 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_AdblockPlus.ini\" }, { label: \"ACL4SSR_Online_NoAuto 无自动测速 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoAuto.ini\" }, { label: \"ACL4SSR_Online_NoReject 无广告拦截规则 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoReject.ini\" }, { label: \"ACL4SSR_Online_Mini 精简版 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini.ini\" }, { label: \"ACL4SSR_Online_Mini_AdblockPlus.ini 精简版 更多去广告 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_AdblockPlus.ini\" }, { label: \"ACL4SSR_Online_Mini_NoAuto.ini 精简版 不带自动测速 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_NoAuto.ini\" }, { label: \"ACL4SSR_Online_Mini_Fallback.ini 精简版 带故障转移 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_Fallback.ini\" }, { label: \"ACL4SSR_Online_Mini_MultiMode.ini 精简版 自动测速、故障转移、负载均衡 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_MultiMode.ini\" }, { label: \"ACL4SSR_Online_Full 全分组 重度用户使用 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full.ini\" }, { label: \"ACL4SSR_Online_Full_NoAuto.ini 全分组 无自动测速 重度用户使用 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_NoAuto.ini\" }, { label: \"ACL4SSR_Online_Full_AdblockPlus 全分组 重度用户使用 更多去广告 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_AdblockPlus.ini\" }, { label: \"ACL4SSR_Online_Full_Netflix 全分组 重度用户使用 奈飞全量 (与Github同步)\", value: \"https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_Netflix.ini\" }, { label: \"ACL4SSR 本地 默认版 分组比较全\", value: \"config/ACL4SSR.ini\" }, { label: \"ACL4SSR_Mini 本地 精简版\", value: \"config/ACL4SSR_Mini.ini\" }, { label: \"ACL4SSR_Mini_NoAuto.ini 本地 精简版+无自动测速\", value: \"config/ACL4SSR_Mini_NoAuto.ini\" }, { label: \"ACL4SSR_Mini_Fallback.ini 本地 精简版+fallback\", value: \"config/ACL4SSR_Mini_Fallback.ini\" }, { label: \"ACL4SSR_BackCN 本地 回国\", value: \"config/ACL4SSR_BackCN.ini\" }, { label: \"ACL4SSR_NoApple 本地 无苹果分流\", value: \"config/ACL4SSR_NoApple.ini\" }, { label: \"ACL4SSR_NoAuto 本地 无自动测速 \", value: \"config/ACL4SSR_NoAuto.ini\" }, { label: \"ACL4SSR_NoAuto_NoApple 本地 无自动测速\u0026无苹果分流\", value: \"config/ACL4SSR_NoAuto_NoApple.ini\" }, { label: \"ACL4SSR_NoMicrosoft 本地 无微软分流\", value: \"config/ACL4SSR_NoMicrosoft.ini\" }, { label: \"ACL4SSR_WithGFW 本地 GFW列表\", value: \"config/ACL4SSR_WithGFW.ini\" } ] }, ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:3:2","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"安装依赖与打包发布 这里需要安装 Node 与 Yarn 你可以通过以下命令查看是否安装成功 node -v yarn -v 安装构建依赖项 yarn install 使用 webpack 运行 Web 客户端以进行本地开发 yarn serve 浏览器访问 http://服务器ip:8080/ 应该可以进行前端 sub-web 的预览了。 打包 yarn build 将生成的 dist 目录复制到你的网站目录下，修改网站 conf的 root位置，后加 /dist root /root/sub-web/dist; ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:3:3","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"四、Docker-compose一键部署 参考Yohane聚聚博客：https://yohane.art/development%20notes/2020/12/23/subc.html ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:4:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"创建配置文件 新建/root/nginx/conf.d/server.conf文件，写入以下配置 !/root/nginx/conf.d/server.conf # vhost of subc with proxy server { listen 80; server_name \u003cdomain\u003e; location / { proxy_pass http://subc:25500; } } server { listen 80; server_name \u003cdomain\u003e; location / { proxy_pass http://subweb; } } 新建/root/subconverter/docker-compose.yml文件，写入以下配置 !/root/subconverter/docker-compose.yml version: \"3\" services: subc: hostname: subc restart: always container_name: subc image: tindy2013/subconverter:latest subweb: hostname: subweb restart: always container_name: subweb image: careywong/subweb:latest nginx: hostname: nginx restart: always container_name: nginx image: nginx:latest ports: - \"80:80\" - \"443:443\" links: - \"subc:subc\" - \"subweb:subweb\" volumes: - /root/nginx/conf.d:/etc/nginx/conf.d ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:4:1","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"启动 docker-compose -d ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:4:2","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"五、总结 至此，你的Clash订阅转换就搭建好了，如果觉得ALC4ALL默认的配置文件不适合你，也可以在此基础上魔改出适合自己的规则，并时刻与ALC4ALL更新的规则同步，这将在后续文章中讲述。 ","date":"2020-12-22","objectID":"/14_self-built_clash_subscription_conversion/:5:0","tags":["Clash","subconverter","Sub-Web","订阅转换","Docker-compose"],"title":"自建 Clash 订阅转换","uri":"/14_self-built_clash_subscription_conversion/"},{"categories":["干货","折腾"],"content":"一、前言 由于本地网络环境实在太差，VSCode Remote 连接编译机无限重试，所以就用ssh跳板抢救一下。 所有命令基于open-ssh ","date":"2020-09-11","objectID":"/13_use_ssh_springboard_to_connect_the_intranet_server/:1:0","tags":["ssh","跳板机"],"title":"利用 SSH 跳板机连接内网服务器","uri":"/13_use_ssh_springboard_to_connect_the_intranet_server/"},{"categories":["干货","折腾"],"content":"二、直接连接 ssh username@目标机器ip -p 22 -o ProxyCommand='ssh -p 22 username@跳板机ip -W %h:%p' 例子： ssh root@192.168.1.2 -p 22 -o ProxyCommand='ssh -p 22 root@10.1.1.1 -W %h:%p' ","date":"2020-09-11","objectID":"/13_use_ssh_springboard_to_connect_the_intranet_server/:2:0","tags":["ssh","跳板机"],"title":"利用 SSH 跳板机连接内网服务器","uri":"/13_use_ssh_springboard_to_connect_the_intranet_server/"},{"categories":["干货","折腾"],"content":"三、添加config 每次登录都输入上面命令显然很麻烦，所以可以将配置写在~/.ssh/config里，如果没有这个文件新建一个 nano ~/.ssh/config 例子： Host jump #任意名字，随便使用 HostName 192.168.1.1 #这个是跳板机的IP，支持域名 Port 22 #跳板机端口 User username_jump #跳板机用户 Host target #同样，任意名字，随便起 HostName 192.168.1.2 #真正登陆的服务器，不支持域名必须IP地址 Port 22 #服务器的端口 User username #服务器的用户 ProxyCommand ssh jump -W %h:%p ","date":"2020-09-11","objectID":"/13_use_ssh_springboard_to_connect_the_intranet_server/:3:0","tags":["ssh","跳板机"],"title":"利用 SSH 跳板机连接内网服务器","uri":"/13_use_ssh_springboard_to_connect_the_intranet_server/"},{"categories":["干货","折腾"],"content":"四、使用 直接输入ssh target即可，同理连接跳板直接输入ssh jump 参考： ssh 通过跳板机直连跳板机内网服务器 ","date":"2020-09-11","objectID":"/13_use_ssh_springboard_to_connect_the_intranet_server/:4:0","tags":["ssh","跳板机"],"title":"利用 SSH 跳板机连接内网服务器","uri":"/13_use_ssh_springboard_to_connect_the_intranet_server/"},{"categories":["干货","折腾"],"content":" 记录下在Manjaro上使用MIDI键盘的操作。主要参考Arch wiki的USB MIDI keyboards部分。 ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:0:0","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"准备工作 ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:1:0","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"确认你的声卡驱动为ALSA 安装alsa-utils sudo pacman -S alsa-utils 输入aseqdump,看到以下输出则正常,接着Ctrl+C终止即可 Waiting for data at port 128:0. Press Ctrl+C to end. Source_ Event_________________ Ch _Data__ ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:1:1","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"确认你的MIDI键盘与Manjaro正常通信 插上你的MIDI键盘，打开电源，输入lsusb应该能看到以下输出，其中Nektar Impact GX61即为MIDI键盘 接着输入lsmod | grep usb应该能看到以下输出，输出中有snd_usb_audio ，snd_usb_lib即可 再输入aconnect -i则会列出MIDI所有输入端口，如图所示，需要记下client 20 输入aseqdump -p 20，其中20为上面记下的client 20，然后敲击键盘，看到如下输出则你的MIDI键盘与Manjaro正常通信 ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:1:2","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"弹奏！ ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:2:0","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"安装软件合成器QSynth sudo pacman -S qsynth ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:2:1","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"下载SoundFont 从http://soundfonts.narod.ru/下载名为Фортепиано的Piano.zip解压备用 ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:2:2","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["干货","折腾"],"content":"设置QSynth 输入qsynth -a alsa启动QSynth 输入点击Setuo设置下上面下载的音源，个人推荐Collection,CP-70,Grand这三个 输入aconnect -i查看MIDI输入端口，记下20 输入aconnect -o查看MIDI输出端口，找到FLUID Synth，如果在添加QSynth中添加了多个配置文件，则会如下所示，否则只有一个输出，记下128 输入aconnect 20 128，敲击MIDI键盘，Enjoy~ 备注：每重启次PC或者QSync都需要重复步骤5 ","date":"2020-03-07","objectID":"/12_using_a_midi_keyboard_on_linux_manjaro/:2:3","tags":["MIDI","Manjaro","Linux","键盘","Arch"],"title":"在 Linux ( Manjaro ) 上使用 MIDI 键盘","uri":"/12_using_a_midi_keyboard_on_linux_manjaro/"},{"categories":["折腾"],"content":"给博客迁移到了搬瓦工传家宝上并使用Cloudflare CDN加速中间的一些坑~ #一 后台管理页面会打不开 如果博客到CDN没有启用https，而CDN启用https可能会造成后台管理页面打不开的状况。 解决方法：编辑站点根目录下的config.inc.php 加入下面这行配置 /** 开启 HTTPS */ define('__TYPECHO_SECURE__',true); 这样后台页面就打开了~ #二 待续 ","date":"2019-04-24","objectID":"/10_add_cloudflare_cdn_problems_and_solutions/:0:0","tags":["CDN","Cloudflare","Typecho"],"title":"添加 Cloudflare CDN 遇到的问题及解决","uri":"/10_add_cloudflare_cdn_problems_and_solutions/"},{"categories":["干货","折腾","分享"],"content":" Pxder是一款利用Node.js编写的能够批量下载你在P站收藏，或者喜欢的画师插画的下载器，其开源地址为：https://github.com/Tsuk1ko/pxder 本篇主要讲解在Ubuntu16.04下使用，Windows下可参考上面的地址 ##安装Node.js环境 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs 接着安装Pxder npm i -g pxder 卸载的话运行 npm uninstall -g pxder ##配置 首先我们需要配置一下账户及下载设置 ###登录 pxder --login 接着输入你的账户密码 ###登出 pxder --logout ###下载设置 pxder --setting 然后你会看到以下输出 Pxder Options [1] Download path /pixiv # 下载目录，必须设置 [2] Download thread 5 # 下载线程数 [3] Download timeout 30 # 下载超时 [4] Auto rename off # 自动重命名（文件夹） [5] Proxy Disable # 使用代理 [0] Exit Press a key [1...5 / 0]: 0 输入相关序号进行设置就好，最后输入0退出 ##使用 ###下载公开收藏 pxder -b # 或 pxder --bookmark 插画会被保存在[bookmark] Public文件夹中 ###下载私密收藏 pxder -B # 或 pxder --bookmark--private 插画会被保存在[bookmark] Private文件夹中 ###下载公开关注的画师的所有作品 pxder -f # 或 pxder --follow ###下载私密关注的画师的所有作品 pxder -F # 或 pxder --follow--private ###下载或更新某画师的所有插画作品 使用-u或--uid参数，后跟画师的 UID，可单个可多个，如果多个则用英文半角逗号隔开 pxder -u uid1,uid2,uid3,... 例： pxder -u 5899479,724607,11597411 ###更新已下载的画师的画作 pxder -U # 或 pxder --update ###下载指定 PID 插画 pxder -p pid1,pid2,pid3,... 例： pxder -p 70593670,70594912,70595516 插画会被保存在PID文件夹中 有问题欢迎评论留言～ ","date":"2019-01-11","objectID":"/9_use_pxder_to_download_your_illustrations_from_pixiv/:0:0","tags":["P站","pixiv","Pxder"],"title":"利用 Pxder 批量下载 Pixiv 你收藏的插画","uri":"/9_use_pxder_to_download_your_illustrations_from_pixiv/"},{"categories":["干货","折腾","分享"],"content":" 下载的视频仅作为交流学习收藏哦，不要作为商用！ “YouTube-dl”是一个不仅可以下载YouTube视频，还可以下载哔哩哔哩等视频的命令行工具。 其项目地址为https://github.com/rg3/youtube-dl 在这里就说一下如何快速的上手使用～ #安装ffmpeg 首先需要安装ffmpeg，因为youtube-dl下载完成后会自动调用，对视频进行封装。 以下命令基于Ubuntu16.04 # 添加软件源 $ sudo add-apt-repository ppa:jonathonf/ffmpeg-3 # 更新并安装 $ sudo apt update \u0026\u0026 sudo apt install ffmpeg libav-tools x264 x265 # 卸载官方源 $ sudo apt autoremove 如果出现add-apt-repository command not found 运行下： apt-get install software-properties-common #安装Youtube-dl 运行 sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl sudo chmod a+rx /usr/local/bin/youtube-dl 这样的话YouTube-dl就安装完毕了，接下来是基本使用 #直接下载视频 命令格式为youtube-dl [OPTIONS] URL [URL...] 不带任何参数，则默认下载画质、音质最好的文案。 例： youtube-dl \"https://www.youtube.com/watch?v=l4WNrvVjiTw\" （似乎4k的视频只会下载1080p，如何选择下载分辨率见下文） #直接下载播放列表 运行 youtube-dl \"video_url\" 小心硬盘爆炸，哈哈哈哈 #选择合适的分辨率下载 运行 youtube-dl -F \"video_url\" 查看可选的视、音频格式 运行后会输出以下例子 [youtube] Bey4XXJAqS8: Downloading webpage [youtube] Bey4XXJAqS8: Downloading video info webpage [info] Available formats for Bey4XXJAqS8: format code extension resolution note 249 webm audio only DASH audio 61k , opus @ 50k, 11.46MiB 250 webm audio only DASH audio 82k , opus @ 70k, 15.43MiB 171 webm audio only DASH audio 110k , vorbis@128k, 21.97MiB 140 m4a audio only DASH audio 129k , m4a_dash container, mp4a.40.2@128k, 26.91MiB 251 webm audio only DASH audio 156k , opus @160k, 29.94MiB 278 webm 256x144 144p 101k , webm container, vp9, 30fps, video only, 16.33MiB 394 mp4 256x144 144p 107k , av01.0.05M.08, 30fps, video only, 14.61MiB 160 mp4 256x144 144p 115k , avc1.4d400c, 30fps, video only, 11.04MiB 242 webm 426x240 240p 233k , vp9, 30fps, video only, 31.57MiB 395 mp4 426x240 240p 250k , av01.0.05M.08, 30fps, video only, 29.34MiB 133 mp4 426x240 240p 252k , avc1.4d4015, 30fps, video only, 22.91MiB 396 mp4 640x360 360p 437k , av01.0.05M.08, 30fps, video only, 54.59MiB 243 webm 640x360 360p 448k , vp9, 30fps, video only, 60.07MiB 134 mp4 640x360 360p 735k , avc1.4d401e, 30fps, video only, 64.87MiB 244 webm 854x480 480p 804k , vp9, 30fps, video only, 109.78MiB 397 mp4 854x480 480p 838k , av01.0.05M.08, 30fps, video only, 100.78MiB 135 mp4 854x480 480p 1356k , avc1.4d401f, 30fps, video only, 131.16MiB 247 webm 1280x720 720p 1755k , vp9, 30fps, video only, 227.80MiB 398 mp4 1280x720 720p 1794k , av01.0.05M.08, 30fps, video only, 209.23MiB 136 mp4 1280x720 720p 2697k , avc1.4d401f, 30fps, video only, 260.78MiB 248 webm 1920x1080 1080p 3236k , vp9, 30fps, video only, 414.56MiB 137 mp4 1920x1080 1080p 4752k , avc1.640028, 30fps, video only, 481.99MiB 271 webm 2560x1440 1440p 9041k , vp9, 30fps, video only, 1.18GiB 313 webm 3840x2160 2160p 18002k , vp9, 30fps, video only, 2.76GiB 17 3gp 176x144 small 70k , mp4v.20.3, mp4a.40.2@ 24k (22050Hz), 14.93MiB 36 3gp 320x180 small 202k , mp4v.20.3, mp4a.40.2 (22050Hz), 42.88MiB 43 webm 640x360 medium , vp8.0, vorbis@128k, 148.66MiB 18 mp4 640x360 medium 552k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 116.91MiB 22 mp4 1280x720 hd720 1357k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best) 在这里我们可以看到，默认best选择的是第22个，只有720p的分辨率，所以在这里想下载4k的视频话，在这了需要运行 youtube-dl -f '313+251' \"video_url\" '313+251'：313是视频编号，251是音频编号 \"video_url\"是你的视频地址 这样，就可以下载你想要的分辨率的视频。 好了，如果有什么问题欢迎下面评论～ ","date":"2019-01-08","objectID":"/8_elegantly_download_youtube_videos_with_youtube-dl/:0:0","tags":["YouTube","YouTube-dl","下载","视频"],"title":"利用 YouTube-dl 优雅地下载 YouTube 视频","uri":"/8_elegantly_download_youtube_videos_with_youtube-dl/"},{"categories":["杂谈"],"content":" 人类的本质是什么？ 咕咕咕….. 平安夜不吃平安果，吃团子吧～ 看过Clannad留言评论举个爪～ ","date":"2019-01-06","objectID":"/7_cuckoo/:0:0","tags":["Clannad","动漫"],"title":"咕咕咕","uri":"/7_cuckoo/"},{"categories":["干货","折腾"],"content":" 本片讲述挂载Google Drive扩展你的VPS硬盘并把Aria2下载后的文件自动上传到Google Drive中等玩法。 ##一、安装rclone curl https://rclone.org/install.sh | sudo bash ##二、初始化配置 rclone config 按照下面选择走： Current remotes: Name Type ==== ==== gdrive drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q\u003e n 这里输入n，新建一个 name\u003e test 输入一个名字，记住之后会用到 Type of storage to configure. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Alias for a existing remote \\ \"alias\" 2 / Amazon Drive \\ \"amazon cloud drive\" 3 / Amazon S3 Compliant Storage Providers (AWS, Ceph, Dreamhost, IBM COS, Minio) \\ \"s3\" 4 / Backblaze B2 \\ \"b2\" 5 / Box \\ \"box\" 6 / Cache a remote \\ \"cache\" 7 / Dropbox \\ \"dropbox\" 8 / Encrypt/Decrypt a remote \\ \"crypt\" 9 / FTP Connection \\ \"ftp\" 10 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\" 11 / Google Drive \\ \"drive\" 12 / Hubic \\ \"hubic\" 13 / JottaCloud \\ \"jottacloud\" 14 / Local Disk \\ \"local\" 15 / Mega \\ \"mega\" 16 / Microsoft Azure Blob Storage \\ \"azureblob\" 17 / Microsoft OneDrive \\ \"onedrive\" 18 / OpenDrive \\ \"opendrive\" 19 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\" 20 / Pcloud \\ \"pcloud\" 21 / QingCloud Object Storage \\ \"qingstor\" 22 / SSH/SFTP Connection \\ \"sftp\" 23 / Webdav \\ \"webdav\" 24 / Yandex Disk \\ \"yandex\" 25 / http Connection \\ \"http\" Storage\u003e 11 输入11 Google Application Client Id Leave blank normally. Enter a string value. Press Enter for the default (\"\"). client_id\u003e 直接回车 Google Application Client Secret Leave blank normally. Enter a string value. Press Enter for the default (\"\"). client_secret\u003e 直接回车 Scope that rclone should use when requesting access from drive. Enter a string value. Press Enter for the default (\"\"). Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\" scope\u003e 1 输入1 ID of the root folder Leave blank normally. Fill in to access \"Computers\" folders. (see docs). Enter a string value. Press Enter for the default (\"\"). root_folder_id\u003e 直接回车 Service Account Credentials JSON file path Leave blank normally. Needed only if you want use SA instead of interactive login. Enter a string value. Press Enter for the default (\"\"). service_account_file\u003e 直接回车 Edit advanced config? (y/n) y) Yes n) No y/n\u003e n 输入n Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine or Y didn't work y) Yes n) No y/n\u003e n 输入n If your browser doesn't open automatically go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline\u0026client_id=xxxxxxxxxxxxxxxxxxxxxxxxxx 这里会给你一个链接，打开后用你的Google Drive授权就会得到下面一串代码填入即可 Log in and authorize rclone for access Enter verification code\u003e 4/rQDL5M58Dv_Mjwxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Configure this as a team drive? y) Yes n) No y/n\u003e y 输入y Fetching team drive list... No team drives found in your account-------------------- [test] type = drive scope = drive token = {\"access_token\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\"token_type\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\"expiry\":\"2018-12-08T14:45:49.328865767+08:00\"} -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d\u003e y 输入y Current remotes: Name Type ==== ==== gdrive drive test drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy r","date":"2018-12-08","objectID":"/6_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_3/:0:0","tags":["Nextcloud","rclone","Google Drive"],"title":"伪 NAS 利用 VPS 实现备份、下载、串流播放一条龙(下)","uri":"/6_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_3/"},{"categories":["干货","折腾"],"content":" 本文主要讲述Directory Lister、Aria2、Nextcloud的配置问题 #一、Directory Lister篇 来自逗比大佬 #不显示文件和目录 如果安装 lnmp一键包上传Directory Lister后，Directory Lister不显示文件和目录，那么可能是 PHP函数 scandir 被禁用了，取消禁用即可。 sed -i 's/,scandir//g' /usr/local/php/etc/php.ini # 取消scandir函数禁用 /etc/init.d/php-fpm restart # 重启 PHP生效 ##简介功能说明 使用这个功能，需要打开 resources\\themes\\bootstrap\\index.php 文件，找到第五行的： $md_path = explode(\"com\", $md_path_all); 把 com 改成你的域名后缀(比如 xxx.cn 就是改成 cn )，当初只是自用，现在一开源，我给忘了。 反正就是每个文件夹下面放一个 README.html 文件，这个文件里写着 简介说明内容即可。 为了避免中文乱码，把 README.html 文件用 UTF-8 无BOM 编码 保存！ ##文件修改说明 文件修改说明修改网站中头部导航标题，去这个文件里搜索 DOUBI Soft 然后全部替换为自己要改的。 \\resources\\DirectoryLister.php 修改网站标签栏的标题，去这个文件里把开头 \u003ctitle\u003e 标签中的 DOUBI Soft 替换为自己要改的。 \\resources\\themes\\bootstrap\\index.php 修改网站顶部公告栏内容，去这个文件里搜索 顶部公告栏 或者找到第 72 行。 \\resources\\themes\\bootstrap\\index.php 网站头部公共文件： \\resources\\themes\\bootstrap\\default_header.php 网站底部公共文件： \\resources\\themes\\bootstrap\\default_footer.php 如果想要插入流量统计代码，那只需要把代码写到 default_header.php 文件内即可。 #二、Aria2配置 这里贴上我的Aria2配置，文件路径/root/.aria2.conf ## '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ## ## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释 ## ## 文件保存相关 ## # 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置 dir=/data/wwwroot/dd.test.com/download # 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M #disk-cache=32M # 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc # 预分配所需时间: none \u003c falloc ? trunc \u003c prealloc # falloc和trunc则需要文件系统和内核支持 # NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项 # file-allocation=none # 断点续传 continue=true ## 下载连接相关 ## # 最大同时下载任务数, 运行时可修改, 默认:5 max-concurrent-downloads=25 # 同一服务器连接数, 添加时可指定, 默认:1 max-connection-per-server=5 # 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M # 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载 min-split-size=10M # 单个任务最大线程数, 添加时可指定, 默认:5 split=20 # 整体下载速度限制, 运行时可修改, 默认:0 #max-overall-download-limit=0 # 单个任务下载速度限制, 默认:0 #max-download-limit=0 # 整体上传速度限制, 运行时可修改, 默认:0 max-overall-upload-limit=1M # 单个任务上传速度限制, 默认:0 #max-upload-limit=1000 # 禁用IPv6, 默认:false disable-ipv6=false ## 进度保存相关 ## # 从会话文件中读取下载任务 input-file=/root/.aria2/aria2.session # 在Aria2退出时保存`错误/未完成`的下载任务到会话文件 save-session=/root/.aria2/aria2.session # 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0 save-session-interval=60 ## RPC相关设置 ## # 启用RPC, 默认:false enable-rpc=true # 允许所有来源, 默认:false rpc-allow-origin-all=true # 允许非外部访问, 默认:false rpc-listen-all=true # 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同 #event-poll=select # RPC监听端口, 端口被占用时可以修改, 默认:6800 rpc-listen-port=6800 # 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项 rpc-secret=你自己设置一个密码 # 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项 #rpc-user=\u003cUSER\u003e # 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项 #rpc-passwd=\u003cPASSWD\u003e # 是否启用 RPC 服务的 SSL/TLS 加密, # 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接 rpc-secure=true # 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt) rpc-certificate= /usr/local/nginx/conf/ssl/ar.test.com.crt # 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key) rpc-private-key= /usr/local/nginx/conf/ssl/ar.test.com.key ## BT/PT下载相关 ## # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true follow-torrent=true # BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999 listen-port=51413 # 单个种子最大连接数, 默认:55 #bt-max-peers=55 # 打开DHT功能, PT需要禁用, 默认:true enable-dht=true # 打开IPv6 DHT功能, PT需要禁用 #enable-dht6=false # DHT网络监听端口, 默认:6881-6999 #dht-listen-port=6881-6999 # 本地节点查找, PT需要禁用, 默认:false #bt-enable-lpd=true # 种子交换, PT需要禁用, 默认:true enable-peer-exchange=true # 每个种子限速, 对少种的PT很有用, 默认:50K #bt-request-peer-speed-limit=50K # 客户端伪装, PT需要 peer-id-prefix=-TR2770- user-agent=Transmission/2.77 # 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0 seed-ratio=0.000001 # 强制保存会话, 即使任务已经完成, 默认:false # 较新的版本开启后会在任务完成后依然保留.aria2文件 #force-save=false # BT校验相关, 默认:true #bt-hash-check-seed=true # 继续之前的BT任务时, 无需再次校验, 默认:false bt-seed-unverified=true # 保存磁力链接元数据为种子文件(.torrent文件), 默认:false #bt-save-metadata=true #注意事项 ##一、保存路径 保存路径最好放在Directory Lister目录下，这样方便直接访问 如果你放在其他目录，Directory Lister目录下放软链接可能会发生错误。 ##进度保存 记得把进度保存相关设置前的注释取消掉，就像配置文件第38~44行 ##RPC相关设置 密码在第58行修改 由于我们使用全站https，所以在配置文件第67、69行需要填写你的网站证书路径，按照我的上一篇文章建站的话，把ar.test.com替换成你的域名即可。 ##定时更新bt-tracker 如果你使用逗比大佬的脚本并开启了定时更新bt-tracker，那么会有更新过后Aria2没有启动问题，所以解决方法就是","date":"2018-12-08","objectID":"/6_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_2/:0:0","tags":["Nextcloud","Aria2","Directory Lister"],"title":"伪 NAS 利用 VPS 实现备份、下载、串流播放一条龙(中)","uri":"/6_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_2/"},{"categories":["干货","折腾"],"content":" 本文主要讲述使用VPS安装Nextcloud、DirectoryLister、Aria2、AriaNg等服务来实现备份、下载、串流播放等功能…… #新建虚拟主机 首先我们需要新建三个虚拟主机、假设三个虚拟主机网址分别为cloud.test.com、dd.test.com、ar.test.com, 在lnmp目录下运行： ./vhost.sh 接着根据提示创建即可 #安装DirectoryLister LNMP创建的网站根目录为/data/wwwroot/dd.test.com ##官网下载安装 DirectoryLister官网 ##使用魔改版DirectoryLister 这里的魔改版DirectoryLister由逗比大佬提供 网站根目录运行： git clone https://github.com/ToyoDAdoubi/DirectoryLister.git ##文件结构 /data/wwwroot/dd.test.com ├─ resources │ ├ themes │ │ └ bootstrap │ │ └ ..... │ │ │ ├ DirectoryLister.php │ ├ config.php │ └ fileTypes.php │ ├ README.html # 文件夹内的 说明简介文件 # ├ index.php │ ├─ 测试文件夹 │ ├ 测试文件.txt │ └ README.html # 文件夹内的 说明简介文件 # │ └ 测试文件.txt 绝对路径分别为： /data/wwwroot/dd.test.com/resources/ /data/wwwroot/dd.test.com/README.html /data/wwwroot/dd.test.com/index.php /data/wwwroot/dd.test.com/测试文件夹/ /data/wwwroot/dd.test.com/测试文件.txt 一些注意事项见中篇 #安装Aria2及AriaNG ##安装依赖包 首先我么需要安装以下依赖包，来使Aria2能够下载图中的文件类型 sudo apt install wget screen unzip gcc sudo apt install -y libgnutls-dev nettle-dev libgmp-dev libssh2-1-dev libc-ares-dev libxml2-dev zlib1g-dev libsqlite3-dev pkg-config ##安装Aria2 ###方式一、手动编译安装 运行以下命令： sudo apt install auto-apt checkinstall cd /root wget https://github.com/aria2/aria2/releases/download/release-1.33.1/aria2-1.33.1.tar.gz tar xzvf aria2-1.33.1.tar.gz cd aria2-1.33.1 auto-apt run ./configure make checkinstall 这样会生成一个deb包，卸载和重新安装就非常方便了 ###方式二、一键脚本安装（建议） 还是推荐一键脚本安装，比手动编译会少很多问题….. 使用逗比大佬的一键脚本： wget -N --no-check-certificate https://softs.loan/Bash/aria2.sh \u0026\u0026 chmod +x aria2.sh \u0026\u0026 bash aria2.sh # 如果上面这个脚本无法下载，尝试使用备用下载： wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh \u0026\u0026 chmod +x aria2.sh \u0026\u0026 bash aria2.sh 根据脚本提示安装即可 其中，aria2.conf配置文件需要做一些修改，我会另开一篇文章详细说明 #安装AriaNG 到网站根目录，这里是ar.test.com运行 wget https://github.com/mayswind/AriaNg/releases/download/1.0.0/AriaNg-1.0.0.zip 之后解压，然后访问你的域名填写Aria2的密钥即可 #安装Nextcloud ##添加MySQL 在安装Nextcloud之前，我们需要在MySQL中添加一下账户及数据库 访问你的IP，会出现OneinStack的界面 点击phpMyAdmin，登陆后，点击账户，新增用户账户，然后按照如图所示操作 最后点击最下面的执行 这样，MySQL部分完毕 ##安装Nextcloud 首先进入到网站根目录cloud.test.com 然后下载Nextcloud wget https://download.nextcloud.com/server/releases/nextcloud-14.0.4.zip 下载完后解压，输入域名进行接下来的安装即可 至此，Nextcloud安装完毕 安装错误等问题见中篇…… 参考： 一个逗比魔改的Directory Lister~ AriaNg 『原创』BT/种子/磁力链接下载工具 —— Aria2 一键安装管理脚本 ","date":"2018-12-01","objectID":"/5_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_1/:0:0","tags":["NAS","Nextcloud","DirectoryLister","Aria2","AriaNg"],"title":"伪 NAS 利用 VPS 实现备份、下载、串流播放一条龙(上)","uri":"/5_fake_nas_use_vps_to_realize_backup_download_and_streaming_playback_1/"},{"categories":["干货","折腾","分享"],"content":" 作者言：没啥营养，不看也罢…… #一、安装 这里提供两种方式安装 ##图形化安装 这里我们使用 官网 的一键脚本安装。在下图中选择你所需要的功能，然后复制安装命令到你的VPS上运行即可。 ##终端安装 首先，我们要安装一下所需要的软件包 apt-get -y install wget screen curl python 接着下载所需要的一键脚本，解压 wget http://mirrors.linuxeye.com/oneinstack.tar.gz tar xzf oneinstack.tar.gz 然后进入解压后的文件中 执行 screen -S lnmp 防止SSH连接中断导致安装失败,最后运行 ./install.sh 接下来 按照按照提示选择你所需要的组件（又见盗图23333） #二、添加虚拟主机 运行 ./vhost.sh 然后按照提示配置你的虚拟主机 #三、删除虚拟主机 运行 ./vhost.sh del 然后按照提示输入即可 #四、管理服务 Nginx/Tengine/OpenResty: service nginx {start|stop|status|restart|reload|configtest} MySQL/MariaDB/Percona: service mysqld {start|stop|restart|reload|status} PHP: service php-fpm {start|stop|restart|reload|status} Apache: service httpd {start|restart|stop} HHVM: service supervisord {start|stop|status|restart|reload} 注：hhvm进程交给supervisord管理，了解更多请访问《Supervisor管理hhvm进程》 Pure-Ftpd: service pureftpd {start|stop|restart|status} Redis: service redis-server {start|stop|status|restart|reload} Memcached: service memcached {start|stop|status|restart|reload} #五、大版本更新 运行 ./upgrade.sh 按照提示输入即可 参考 lnmp、lamp、lnmpa一键安装包 OneinStack ","date":"2018-12-01","objectID":"/4_use_oneinstack_to_build_website_environment/:0:0","tags":["LNMP","OneinStack","虚拟主机","Nginx","PHP"],"title":"利用 OneinStack 搭建 LNMP 网站环境","uri":"/4_use_oneinstack_to_build_website_environment/"},{"categories":["干货","折腾"],"content":"#VPS加固 ##一、SSH防爆破 顾名思义，防止SSH密码被爆破以及减小VPS压力。 这里我们使用fail2ban，各位应该都听说过这个程序，可以根据SSH登录失败记录来屏蔽某个IP，该脚本有以下几个功能： 自助修改SSH端口 自定义SSH尝试连接次数 自定义最高封禁IP的时间（以小时为单位） 一键完成SSH防止暴力破解 ###安装 运行命令 wget --no-check-certificate https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh \u0026\u0026 bash fail2ban.sh 2\u003e\u00261 | tee fail2ban.log 根据提示输入相应信息; 第一步：选择是否修改SSH端口。 第二步：输入最多尝试输入SSH连接密码的次数 第三步：输入每个恶意IP的封禁时间（单位：小时） ###卸载 运行命令 wget --no-check-certificate https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/uninstall.sh \u0026\u0026 bash uninstall.sh 注意事项： 如果你需要更改SSH端口，请记得在防火墙或者安全组中开放新的SSH端口 安装完成后请会重启SSH服务，请重新连接SSH会话 若出现SSH无法连接的情况，请检查是否修改过SSH端口，请填写写改后的正确端口进行连接 反正我是没用这个，因为之前有一次把我自己的IP屏蔽了一天，23333 ##二、使用密钥登录VPS 密钥的安全性可谓是远大于密码登录，所以，为什么不使用密钥登录呢？还不用担心自己把自己ban掉…… ###生成密钥对 在你的VPS或者本地Linux系统运行命令： ssh-keygen -t rsa 通过上述方式，密钥生成在/root/.ssh或/你的用户根目录/.ssh下，分别为私钥和公钥文件，公钥文件id_rsa.pub就是在接下来需要放置在要VPS的文件，而id_rsa就是要保存到本地的私钥文件。 ###将密钥保存到VPS 我们需要将id_rsa.pub公钥文件放置到VPS用户主目录/root/.ssh下，可以使用scp命令，例：scp 本地文件 用户名@VPS地址：远程文件路径，之后我们需要进行一下操作 将id_rsa.pub文件，重命名为 authorized_keys; 执行chmod 600 ./authorized_keys 命令，修改权限； 执行命令 sudo nano /etc/ssh/sshd_config进行配置，将RSAAuthentication 和 PubkeyAuthentication 后面的值都改成yes ，将PasswordAuthentication yes 修改成 PasswordAuthentication no，然后保存； 重启sshd服务，Debian/Ubuntu执行sudo /etc/init.d/ssh restart ； CentOS执行：sudo /etc/init.d/sshd restart； 注：centos7重启服务方式与以前不同，请执行systemctl restart sshd.service。 最后，你就可以使用密钥登录你的VPS了～ 这是一般VPS的修改方法，但是类似Google Cloud之类的实在你创建实例之前就让你填写公钥的。 #VPS优化 这里主要讲解开启魔改版BBR，为什么是魔改版呢？从玄学角度讲因为它比普通版更快呀～ ##普通VPS开启魔改版BBR 首先，我们要确认一下VPS是否能开启BBR，可以直接使用此命令进行开启 wget --no-check-certificate -qO 'BBR.sh' 'https://moeclub.org/attachment/LinuxShell/BBR.sh' \u0026\u0026 chmod a+x BBR.sh \u0026\u0026 bash BBR.sh -f 注意:执行此命令会自动重启. 之后我们执行以下命令安装魔改版BBR wget --no-check-certificate -qO 'BBR_POWERED.sh' 'https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh' \u0026\u0026 chmod a+x BBR_POWERED.sh \u0026\u0026 bash BBR_POWERED.sh 最后执行lsmod |grep 'bbr_powered'，如返回结果不为空，则安装成功。 ##Google Cloud开启魔改版BBR Google Cloud使用上面方法开启魔改版BBR会失败，原因以后再说，这里先立个Flag…… 对于Google Cloud，我们需要使用以下命令： wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh \u0026\u0026 bash bbr.sh install 安装过程中如果出现这张图片，请选择NO 来删除其他内核(原谅我无耻的盗个图)： 然后根据提示重启系统，之后运行 bash bbr.sh start 即可启用魔改版BBR。 ###查看魔改BBR状态 运行命令： sysctl net.ipv4.tcp_available_congestion_control 如果看到有tsunami就表示开启成功！ 参考 使用SSH密钥登录让Linux VPS服务器更安全 Debian/Ubuntu TCP BBR 改进版/增强版/魔改版 魔改版BBR一键安装脚本 For Debian8 / Ubuntu16 + ","date":"2018-11-28","objectID":"/3_reinforcement_and_optimization_of_vps/:0:0","tags":["VPS","fail2ban","BBR","密钥"],"title":"VPS 的加固及优化","uri":"/3_reinforcement_and_optimization_of_vps/"},{"categories":["干货","折腾"],"content":" 作者言 扶墙向：本篇讲述的是如何选择VPS，以及对购买完后的VPS进行测试及系统升级…… #VPS的选择 如何选择VPS，第一要素自然是是看延迟咯，所以我们先上 这个 网站测试下你到一些常见的VPS供应商机房的延迟，下面给张图： 测完延迟后就选一款适合你的….. 测试网站的开源地址：https://github.com/msmbps/msmbps #VPS的测试 这里我们使用秋水逸冰大佬的一键测试脚本来进行VPS性能的测试 命令： wget -qO- bench.sh | bash 或者 curl -Lso- bench.sh | bash 备注 bench.sh 既是脚本名，同时又是域名。 给个图： 测试完了，感觉还可以就留着，不行的的话就该退款退款，该换就换，千万别凑活着用，给自己找不自在，最后还发工单撕….. #系统大版本升级 有时候，VPS商家给的系统模板并不是最新的，这时候我们就需要手动升级下系统（本文Ubuntu向） 首先，我们需要升级下软件包 sudo apt-get update sudo apt-get upgrade 接着安装update-manager-core sudo apt-get install update-manager-core 然后打开文件/etc/update-manager/release-upgrades，确认Prompt的值设定为lts： # Default behavior for the release upgrader. [DEFAULT] # Default prompting behavior, valid options: # # never - Never check for a new release. # normal - Check to see if a new release is available. If more than one new # release is found, the release upgrader will attempt to upgrade to # the release that immediately succeeds the currently-running # release. # lts - Check to see if a new LTS release is available. The upgrader # will attempt to upgrade to the first LTS release available after # the currently-running one. Note that this option should not be # used if the currently-running release is not itself an LTS # release, since in that case the upgrader won't be able to # determine if a newer release is available. Prompt=lts 确认完毕后，我们需要处理一下可能阻碍升级的依赖关系，所以运行 sudo apt-get dist-upgrade 最后，一切准备就绪，使用Ubuntu的发行工具执行升级 sudo do-release-upgrade 或 sudo do-release-upgrade -d 至此，静待系统升级完毕，期间需要重启系统，重启完毕后，使用 lsb_release -a 可以看到你的系统升级后的版本 参考 秋水逸冰一键测试脚本bench.sh How To Upgrade to Ubuntu 16.04 LTS Linode VPS从Ubuntu Server 14.04LTS升级到Ubuntu Server 16.04LTS ","date":"2018-11-28","objectID":"/2_vps_selection_testing_upgrading/:0:0","tags":["VPS","测试"],"title":"VPS 选择，测试，升级","uri":"/2_vps_selection_testing_upgrading/"},{"categories":["杂谈"],"content":"拖延许久，终于下定决心开始写博客。 说是写，倒不如说是向这个世界发出自己的声音，给这个世界留下自己的印记。 就像我们刚降生下来的第一声啼哭，宣告世界，我们来了！ 很早之前，就开始酝酿博客的事情了，但却总是认为自己准备不足，于是拖拖拉拉，连域名都到期续了一年…… 而现在，是时候了…… ","date":"2018-11-28","objectID":"/1_start/:0:0","tags":[],"title":"Start","uri":"/1_start/"},{"categories":[],"content":"黑夜给了你黑色的眼睛，然而你却用来寻找光明 ","date":"2018-11-25","objectID":"/about/:0:0","tags":[],"title":"关于我","uri":"/about/"},{"categories":null,"content":"使用 SSH隧道 绕过 PLEX 对 Hetzner 的封锁 ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:0:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"},{"categories":null,"content":"确定使用环境 一台 docker 宿主机, 一台 反代机 PLEX 通过 反代机 Nginx 反代, 且 远程访问 已关闭 宿主机能够 SSH 访问 反代机 ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:1:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"},{"categories":null,"content":"修改配置文件 修改 docker-compose 文件, 网络 更改为 host, 添加 environment, 如下 network_mode: host environment: - ALL_PROXY=socks5://127.0.0.1:62312 ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:2:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"},{"categories":null,"content":"重新启动容器 docker-compose down docker-compose up -d ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:3:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"},{"categories":null,"content":"检查是否成功 打开 PLEX 检查, 此时媒体库应该能正常访问, 没有的话 打开侧边栏-更多 或者 进入到容器内 curl ipv4.ip.sb 看看出口IP是不是你的反代机 ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:4:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"},{"categories":null,"content":"持久化 SSH隧道每次自动重连可用 autossh 之类的来自动创建并持久化. 这里不展开了 ","date":"0001-01-01","objectID":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/:5:0","tags":null,"title":"","uri":"/23.using_ssh_tunneling_to_bypass-the_plex_block_on_hetzner/"}]